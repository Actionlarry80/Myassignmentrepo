// Generated by view binder compiler. Do not edit!
package com.andro.sportsbay.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.andro.sportsbay.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemOrdersBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final CardView cdvProductDetail;

  @NonNull
  public final ImageView ivProduct;

  @NonNull
  public final TextView tvAddress;

  @NonNull
  public final TextView tvProductDescription;

  @NonNull
  public final TextView tvProductName;

  @NonNull
  public final TextView tvProductPrice;

  private ItemOrdersBinding(@NonNull ConstraintLayout rootView, @NonNull CardView cdvProductDetail,
      @NonNull ImageView ivProduct, @NonNull TextView tvAddress,
      @NonNull TextView tvProductDescription, @NonNull TextView tvProductName,
      @NonNull TextView tvProductPrice) {
    this.rootView = rootView;
    this.cdvProductDetail = cdvProductDetail;
    this.ivProduct = ivProduct;
    this.tvAddress = tvAddress;
    this.tvProductDescription = tvProductDescription;
    this.tvProductName = tvProductName;
    this.tvProductPrice = tvProductPrice;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemOrdersBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemOrdersBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_orders, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemOrdersBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cdvProductDetail;
      CardView cdvProductDetail = ViewBindings.findChildViewById(rootView, id);
      if (cdvProductDetail == null) {
        break missingId;
      }

      id = R.id.iv_product;
      ImageView ivProduct = ViewBindings.findChildViewById(rootView, id);
      if (ivProduct == null) {
        break missingId;
      }

      id = R.id.tv_address;
      TextView tvAddress = ViewBindings.findChildViewById(rootView, id);
      if (tvAddress == null) {
        break missingId;
      }

      id = R.id.tv_product_description;
      TextView tvProductDescription = ViewBindings.findChildViewById(rootView, id);
      if (tvProductDescription == null) {
        break missingId;
      }

      id = R.id.tv_product_name;
      TextView tvProductName = ViewBindings.findChildViewById(rootView, id);
      if (tvProductName == null) {
        break missingId;
      }

      id = R.id.tv_product_price;
      TextView tvProductPrice = ViewBindings.findChildViewById(rootView, id);
      if (tvProductPrice == null) {
        break missingId;
      }

      return new ItemOrdersBinding((ConstraintLayout) rootView, cdvProductDetail, ivProduct,
          tvAddress, tvProductDescription, tvProductName, tvProductPrice);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
